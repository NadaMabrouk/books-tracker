{"version":3,"sources":["BooksAPI.js","BookShelfChanger.js","Book.js","BookShelf.js","ListShelfs.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","BookShelfChanger","props","handleChange","e","updateShelf","target","value","state","options","label","bind","this","className","onChange","disabled","map","op","Component","Book","url","hasOwnProperty","imageLinks","smallThumbnail","style","width","height","backgroundImage","title","authors","length","author","BookShelf","element","ListShelfs","currentlyReading","filter","wantToRead","read","to","SearchBooks","searchResults","handleSearchQuery","val","setState","searchBooksAPI","BooksAPI","undefined","error","prevState","shelfBooks","booksToDisplay","type","placeholder","curBook","find","ele","BooksApp","b","concat","exact","path","render","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6a571c9f.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React,{Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BookShelfChanger extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            options: [\r\n                {value:'currentlyReading',label:'Currently Reading'},\r\n                {value:'wantToRead',label:'Want To Read'},\r\n                {value:'read',label:'Read'},\r\n                {value:'none',label:'None'}\r\n            ]\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    handleChange = (e) => {\r\n        this.props.updateShelf(this.props.book,e.target.value);\r\n    } \r\n    render(){\r\n        const {book} = this.props;\r\n        return(\r\n            <div className=\"book-shelf-changer\">\r\n                <select value={book.shelf} onChange={this.handleChange}>\r\n                <option value='move' disabled>Move To ...</option>\r\n                {this.state.options.map((op) => (\r\n                    <option key={op.value} value={op.value} >{op.label}</option>\r\n                ))}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nBookShelfChanger.propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookShelfChanger;","import React, {Component} from \"react\";\r\nimport BookShelfChanger from './BookShelfChanger'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Book extends Component {\r\n\r\nrender(){\r\n    const {book,updateShelf} = this.props;\r\n    const url = book.hasOwnProperty('imageLinks') ? book.imageLinks.smallThumbnail: '';\r\n    \r\n    return(\r\n        <div className=\"book\">\r\n            <div className=\"book-top\">\r\n            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${url})` }}></div>\r\n                <BookShelfChanger book={book} updateShelf={updateShelf}/>\r\n          </div>\r\n            <div className=\"book-title\">{book.title}</div>\r\n            {book.authors && \r\n            <div className=\"book-authors\">\r\n                { book.authors.length === 1 ? book.authors[0] : book.authors.map(author => <span key={author}>{author},</span>)}\r\n                </div>}\r\n        </div>\r\n        );\r\n    \r\n}\r\n}\r\nBook.propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n} \r\nexport default Book;","import React, {Component} from 'react';\r\nimport Book from './Book'\r\nimport PropTypes from 'prop-types'\r\nclass BookShelf extends Component {\r\n    \r\n    render(){\r\n        const {title,books,updateShelf} = this.props;\r\n        return(\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{title}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {\r\n                        books.map((element) => (\r\n                            <li key={element.id}>\r\n                                <Book book={element} updateShelf={updateShelf}/>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ol>\r\n                </div>\r\n                 \r\n            </div>\r\n        );\r\n    }\r\n}\r\nBookShelf.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n}\r\nexport default BookShelf;","import React,{Component} from 'react'\r\nimport BookShelf from './BookShelf'\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ListShelfs extends Component {\r\n    \r\n    render(){\r\n        const {books,updateShelf} = this.props;\r\n        const currentlyReading = books.filter((book)=>\r\n                        book.shelf === 'currentlyReading');\r\n        const wantToRead = books.filter((book) => \r\n        book.shelf ==='wantToRead');\r\n\r\n        const read = books.filter((book) => \r\n        book.shelf === 'read');\r\n\r\n        return (\r\n            <div>\r\n            <div className=\"list-books-content\">\r\n              <div> \r\n                  <BookShelf title={'Currently Reading'} books={currentlyReading} updateShelf={updateShelf}/>\r\n                  <BookShelf title={'Want To Read'} books={wantToRead} updateShelf={updateShelf}/>\r\n                  <BookShelf title={'Read'} books={read} updateShelf={updateShelf}/>     \r\n              </div>\r\n            </div>\r\n            <Link to='/searchBooks' className=\"open-search\">Add a book</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nListShelfs.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n}\r\nexport default ListShelfs;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Book from './Book'\r\n\r\nclass SearchBooks extends Component{\r\n    state = {\r\n        query: '',\r\n        searchResults: []\r\n    }\r\n    \r\n    handleSearchQuery = (e) => {\r\n        const val = e.target.value;\r\n        this.setState(() => ({\r\n            query : val\r\n        }));\r\n        this.searchBooksAPI(val);\r\n    }\r\n    searchBooksAPI = (query) => {\r\n        if(query.length > 0){\r\n        BooksAPI.search(query).then(\r\n            (books) => {\r\n                if(books === undefined || books.error){\r\n                    this.setState({searchResults:[]});\r\n                }else{\r\n                    this.setState(prevState =>({\r\n                      ...prevState,\r\n                        searchResults:books\r\n                    }));\r\n                  }\r\n         }) \r\n        }else{\r\n            this.setState({searchResults:[]});\r\n        }\r\n    }\r\n    render(){\r\n        const {shelfBooks,updateShelf} = this.props;\r\n        const booksToDisplay = this.state.query.length > 0 ? this.state.searchResults: [];\r\n        \r\n        return(\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to='/' className=\"close-search\">Close</Link> \r\n                    <input type=\"text\" value={this.state.query} placeholder=\"Search by title or author\" onChange={this.handleSearchQuery}/>\r\n                </div>\r\n\r\n                <div className=\"search-books-results\">\r\n                {booksToDisplay && booksToDisplay.length === 0 ? <p>There's no books to display</p> :\r\n                <ol className=\"books-grid\">\r\n                    {booksToDisplay && !booksToDisplay.error &&     \r\n                        booksToDisplay.map((book) => {\r\n                            let curBook = shelfBooks.find( ele => ele.id === book.id );\r\n                            book.shelf = curBook ? curBook.shelf : 'none';\r\n                            return (\r\n                            <Book key= {book.id} book={book} updateShelf={updateShelf}/>\r\n                            )\r\n                        })\r\n                    } \r\n                </ol>\r\n                }\r\n                </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nSearchBooks.propTypes = {\r\n    shelfBooks: PropTypes.array.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n}\r\nexport default SearchBooks;","import React from 'react'\r\nimport {Route} from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport ListShelfs from './ListShelfs'\r\nimport SearchBooks from './SearchBooks'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books:[],\r\n  }\r\n  componentDidMount(){\r\n    BooksAPI.getAll()\r\n            .then((books) => {\r\n              this.setState(()=> ({\r\n                books: books\r\n              }))\r\n            })\r\n  }\r\n  \r\n  updateShelf = (book,shelf) => {\r\n    BooksAPI.update(book,shelf);\r\n    if(shelf === 'none'){\r\n      this.setState((prevState) => ({\r\n        books: prevState.books.filter((b) => b.id !== book.id)\r\n      }))\r\n    }else{\r\n      book.shelf = shelf;\r\n      this.setState((prevState)=> ({\r\n        books: prevState.books.filter((b) => b.id !== book.id).concat(book)\r\n      }))\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n          <div className=\"list-books\">\r\n            <Route exact path='/' render={() => (\r\n              <div>\r\n                <div className=\"list-books-title\">\r\n                  <h1>Books</h1>\r\n                </div>\r\n                <ListShelfs books={this.state.books} updateShelf={this.updateShelf}/>\r\n              </div>\r\n      )}/>\r\n            <Route path='/searchBooks' render={() => (\r\n              <SearchBooks shelfBooks={this.state.books} updateShelf={this.updateShelf}/>\r\n            )}/>\r\n          </div>   \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}